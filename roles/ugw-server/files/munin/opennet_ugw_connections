#!/usr/bin/env python
# ACHTUNG: verwaltet via ansible - siehe https://wiki.opennet-initiative.de/wiki/Server_Installation/Ansible

import sys
import os
import glob
import re


USER_STATUS_FILENAME = "/var/log/openvpn/opennet_users.status.log"
UGW_STATUS_FILENAME = "/var/log/openvpn/opennet_ugw.status.log"


def count_connections(filename):
    in_clients = False
    count = 0
    with open(filename, "r") as f:
        for line in f.readlines():
            line = line.strip()
            if line.startswith("Common Name,"):
                in_clients = True
            elif line == "ROUTING TABLE":
                break
            elif in_clients:
                if not line.startswith("UNDEF,"):
                    # Beispiel:
                    #   1.43.ugw.on,91.44.196.216:42503,225592577,231623679,Wed Dec 16 09:56:00 2015
                    client_cn = line.split(",")[0]
                    client_ip = line.split(",")[1].split(":")[0]
                    yield client_cn, client_ip


def get_ugw_dict_with_client_count():
    ugw_dict = {}
    for ugw_cn, ugw_ip in count_connections(UGW_STATUS_FILENAME):
        ugw_dict[ugw_ip] = {"cn": ugw_cn, "count": 0}
    for client_cn, client_ip in count_connections(USER_STATUS_FILENAME):
        if not client_ip in ugw_dict:
            # unbekannter Client (ohne dazugehoerige UGW-Verbindung)
            ugw_dict[client_ip] = {"cn": client_ip, "count": 0}
        ugw_dict[client_ip]["count"] += 1
    return ugw_dict


def get_clean_fieldname(label):
    return "CN_" + re.sub(r"[^a-zA-Z0-9_]", "_", label)


if __name__ == "__main__":
    if (len(sys.argv) > 1) and (sys.argv[1] == "config"):
        print "graph_title OpenVPN client connections by UGW"
        print "graph_args --base 1000 -l 0"
        print "graph_scale yes"
        print "graph_vlabel clients"
        print "graph_category opennet"
        print "graph_info This graph shows the number of connected users grouped by UGWs."
        ugw_dict = get_ugw_dict_with_client_count()
        def get_ugw_sort_id(ugw_ip):
            cn = ugw_dict[ugw_ip]["cn"]
            # berechne den Sortierschluessel als: 256 * x + y (fuer CN="x.y.ugw.on")
            int_tokens = reversed([int(token) for token in cn.split(".") if token.isdigit()])
            return sum([value * (256 ** index) for index, value in enumerate(int_tokens)] or [])
        # sortiere die UGWs nach ihrer CN
        is_first = True
        for ugw_ip in sorted(ugw_dict, key=lambda ugw_key: get_ugw_sort_id(ugw_key)):
            fieldname = get_clean_fieldname(ugw_dict[ugw_ip]["cn"])
            print("%s.label %s" % (fieldname, ugw_dict[ugw_ip]["cn"]))
            print("%s.draw %s" % (fieldname, "AREA" if is_first else "STACK"))
            is_first = False
    else:
        ugw_dict = get_ugw_dict_with_client_count()
        for ugw_ip in ugw_dict:
            fieldname = get_clean_fieldname(ugw_dict[ugw_ip]["cn"])
            print("%s.value %d" % (fieldname, ugw_dict[ugw_ip]["count"]))
