#!/usr/bin/env python
# ACHTUNG: verwaltet via ansible
# siehe https://wiki.opennet-initiative.de/wiki/Server_Installation/Ansible
#
#  #%# family=manual
#  #%# capabilities=autoconf suggest


import os
import re
import sys


USER_STATUS_FILENAME = "/var/log/openvpn/opennet_users.status.log"
UGW_STATUS_FILENAME = "/var/log/openvpn/opennet_ugw.status.log"


def get_vpn_connections(filename):
    in_clients = False
    with open(filename, "r") as f:
        for line in f.readlines():
            line = line.strip()
            if line.startswith("Common Name,"):
                in_clients = True
            elif line == "ROUTING TABLE":
                break
            elif in_clients:
                if not line.startswith("UNDEF,"):
                    # Beispiel:
                    #   1.43.ugw.on,91.44.196.216:42503,222577,233679,Wed Dec 16 09:56:00 2015
                    #   2.190.ugw.on,::ffff:139.30.241.206,3088683,3175564,Tue Mar 27 03:25:41 2018
                    client_cn, client_address, traffic_rx, traffic_tx = line.split(",")[:4]
                    if client_address.count(":") == 1:
                        # old format: IP:Port
                        client_ip = client_address.split(":")[0]
                    elif client_address.startswith("::ffff:"):
                        # new format: IPv6-style address ("::ffff:<IPv4>")
                        client_ip = client_address[7:]
                    else:
                        # new format: IPv6-style address (real IPv6)
                        client_ip = client_address
                    # der Verkehr wird von OpenVPN in kByte angegeben
                    yield client_cn, client_ip, int(traffic_tx) * 1024, int(traffic_rx) * 1024


def _get_cn_sorting_value(cn):
    # berechne den Sortierschluessel als: 256 * x + y (fuer CN="x.y.ugw.on")
    int_tokens = reversed([int(token) for token in cn.split(".") if token.isdigit()])
    return sum([value * (256 ** index) for index, value in enumerate(int_tokens)] or [])


def get_ugw_dict_with_details():
    ugw_dict = {}
    for ugw_cn, ugw_ip, traffic_tx, traffic_rx in get_vpn_connections(UGW_STATUS_FILENAME):
        # Falls hinter einer IP mehrere UGWs betrieben werden (z.B. in der Frieda), dann
        # soll das dieser IP zugeordnete UGW stabil bleiben. Wir legen dazu einfach fest,
        # dass das UGW mit dem kleineren CN immer gewinnt. Die Nutzer beider UGWs werden
        # somit zusammengefasst dem UGW mit dem kleineren CN zugeordnet.
        if ((ugw_ip in ugw_dict) and
                (_get_cn_sorting_value(ugw_cn) > _get_cn_sorting_value(ugw_dict[ugw_ip]["cn"]))):
            continue
        # wir ignorieren den UGW-Mesh-Verkehr - es geht nur um die Nutzertunnel
        ugw_dict[ugw_ip] = {"cn": ugw_cn, "count": 0, "traffic_tx": 0, "traffic_rx": 0}
    for client_cn, client_ip, traffic_tx, traffic_rx in get_vpn_connections(USER_STATUS_FILENAME):
        if client_ip not in ugw_dict:
            # unbekannter Client (ohne dazugehoerige UGW-Verbindung)
            ugw_dict[client_ip] = {"cn": client_ip, "count": 0, "traffic_tx": 0, "traffic_rx": 0}
        ugw_dict[client_ip]["count"] += 1
        ugw_dict[client_ip]["traffic_tx"] += traffic_tx
        ugw_dict[client_ip]["traffic_rx"] += traffic_rx
    return ugw_dict


def get_clean_fieldname(label):
    return "CN_" + re.sub(r"[^a-zA-Z0-9_]", "_", label)


def run_count(action):
    if action == "config":
        print("graph_title OpenVPN client count by UGW")
        print("graph_args --base 1000 -l 0")
        print("graph_scale yes")
        print("graph_vlabel number of clients")
        print("graph_category opennet")
        print("graph_info This graph shows the number of connected users grouped by UGWs.")
        ugw_dict = get_ugw_dict_with_details()
        # sortiere die UGWs nach ihrer CN
        is_first = True
        for ugw_ip in sorted(ugw_dict, key=lambda ugw_key: _get_cn_sorting_value(
                ugw_dict[ugw_key]["cn"])):
            fieldname = get_clean_fieldname(ugw_dict[ugw_ip]["cn"])
            print("%s.label %s" % (fieldname, ugw_dict[ugw_ip]["cn"]))
            print("%s.draw %s" % (fieldname, "AREA" if is_first else "STACK"))
            is_first = False
    else:
        ugw_dict = get_ugw_dict_with_details()
        for ugw_ip in ugw_dict:
            fieldname = get_clean_fieldname(ugw_dict[ugw_ip]["cn"])
            print("%s.value %d" % (fieldname, ugw_dict[ugw_ip]["count"]))


def run_traffic(action):
    if action == "config":
        print("graph_title OpenVPN client traffic by UGW")
        print("graph_args --base 1000 -l 0")
        print("graph_scale yes")
        print("graph_vlabel bits in (-) / out (+) per second")
        print("graph_category opennet")
        print("graph_info This graph shows the volume of the users of each UGW.")
        ugw_dict = get_ugw_dict_with_details()
        # sortiere die UGWs nach ihrer CN
        is_first = True
        for ugw_ip in sorted(ugw_dict, key=lambda ugw_key: _get_cn_sorting_value(
                ugw_dict[ugw_key]["cn"])):
            fieldname = get_clean_fieldname(ugw_dict[ugw_ip]["cn"])
            print("%s_rx_bytes.label %s" % (fieldname, ugw_dict[ugw_ip]["cn"]))
            print("%s_rx_bytes.type DERIVE" % fieldname)
            print("%s_rx_bytes.min 0" % fieldname)
            print("%s_rx_bytes.cdef %s_rx_bytes,125,/" % (fieldname, fieldname))
            print("%s_rx_bytes.graph no" % fieldname)
            print("%s_tx_bytes.label %s" % (fieldname, ugw_dict[ugw_ip]["cn"]))
            print("%s_tx_bytes.type DERIVE" % fieldname)
            print("%s_tx_bytes.min 0" % fieldname)
            print("%s_tx_bytes.cdef %s_tx_bytes,125,/" % (fieldname, fieldname))
            print("%s_tx_bytes.draw %s" % (fieldname, "AREA" if is_first else "STACK"))
            print("%s_tx_bytes.negative %s_rx_bytes" % (fieldname, fieldname))
            is_first = False
    else:
        ugw_dict = get_ugw_dict_with_details()
        for ugw_ip in ugw_dict:
            fieldname = get_clean_fieldname(ugw_dict[ugw_ip]["cn"])
            print("%s_rx_bytes.value %d" % (fieldname, ugw_dict[ugw_ip]["traffic_rx"]))
            print("%s_tx_bytes.value %d" % (fieldname, ugw_dict[ugw_ip]["traffic_tx"]))


if __name__ == "__main__":
    script_name = os.path.basename(sys.argv[0])
    action = sys.argv[1] if len(sys.argv) > 1 else None
    if action == "suggest":
        print("count")
        print("traffic")
    elif action in (None, "config"):
        if script_name.endswith("_count"):
            run_count(action)
        elif script_name.endswith("_traffic"):
            run_traffic(action)
        else:
            sys.stderr.write("Unknown plugin: %s (expected: 'traffic' or 'count')" % script_name)
            sys.exit(2)
    else:
        sys.stderr.write("Unknown action: %s" % action)
        sys.exit(1)
