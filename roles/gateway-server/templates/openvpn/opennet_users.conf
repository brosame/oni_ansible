###############################################################################
# {{ ansible_managed }}
###############################################################################

# grundlegende Server-Einstellungen
server {{ openvpn_users_ipv4_base }} {{ openvpn_users_ipv4_netmask }}
port 1600
proto udp6
max-clients 1000

# Zertifikate
ca /etc/openvpn/opennet_users/ca.crt
cert /etc/ssl/private/opennet-initiative.de/{{ short_hostname }}.opennet-initiative.de.crt
key /etc/ssl/private/opennet-initiative.de/{{ short_hostname }}.opennet-initiative.de.key
dh /etc/openvpn/dh2048.pem
crl-verify /etc/ssl/crl/opennet-vpn-user.crl

# Alte Clients (vor v0.5.4) können sich nur mit explizit gesetzter
# "tls-version-min" (entweder auf Client- oder auf der Server-Seite) verbinden.
# Dies ist erst seit Debian Buster erforderlich.
# Die Ursache für das veränderte Verhalten nach dem Setzen dieser Option ist
# unklar, da "1.0" laut Doku der Vorgabewert sein sollte.
# Siehe https://community.openvpn.net/openvpn/ticket/1211
tls-version-min 1.0

# Ohne die multihome-Option ermittelt openvpn selbst seine Quell-Adresse beim
# Beantworten von Anfragen. Dies ist fuer uns unerwuenscht, wenn es mehrere
# Wege zu den OpenVPN-Servern bzw. zu den Clients gibt.
# Ein Client, dessen oeffentliche IP als Route im Mesh verteilt wird, kann
# keine OpenVPN-Verbinung ueber die oeffentliche IP aufbauen, da der OpenVPN-
# Server die Antworten versucht ueber das Mesh zurueckzusenden. Dies
# verhindert den Verbindungsaufbau.
# Testfall:
#   Aufbau einer OpenVPN-Verbindung von einem Client dessen oeffentliche IP
#   im Mesh announciert wird (z.B. Uni-Server oder Server die im Opennet mit
#   ihrer oeffenlichen IP Dienste anbieten und gleichzeitig ihren Anschluss
#   als UGW teilen - z.B. AP1.120).
multihome

# IPv6-Adressen (optional)
{{ ugw_openvpn_users_extra_settings }}

# Verbindungsdetails
keepalive 10 120
# die verwendete Kompression wird spaeter im "connect"-Skript ausgehandelt
{% if ansible_distribution_major_version|int < 9 %}
comp-lzo
{% else %}
compress lzo
{% endif %}
# erlaube dem Client, seine IP zu wechseln (z.B. bei einem Routing-Wechsel auf einem Client mit zwei olsr-Interfaces)
float
# der Standard-Wert (100) verursacht bei ca. 100 Clients regelmaessig Paketverluste
# siehe: ifconfig tun-users | grep "TX.*dropped"
txqueuelen 2000

# Rechte
user openvpn
group openvpn

# Netzwerkschnittstelle
dev-type tun
dev {{ openvpn_users_interface }}
persist-key
persist-tun

# Logging
status /var/log/openvpn/opennet_users.status.log
# nur im Notfall fuer Debugging kurzfristig aktivieren und verbosity erhoehen
#log-append  /var/log/openvpn/opennet_users.log
verb 0
management localhost 7506

# IP-Ermittlung fuer den Client
script-security 2
client-connect /etc/openvpn/opennet_users/connect_script.py

# dns push for mobile clients
push "dhcp-option DOMAIN opennet-initiative.de"
push "dhcp-option DOMAIN-SEARCH opennet-initiative.de"
push "dhcp-option DOMAIN-SEARCH on"
# Nur die Gegenstelle des Crypto-Tunnels announcieren.
# Die Firmware (ab v0.5.2) wertet diese Eintraege aus und verwendet ausschliesslich diese Hosts.
# Somit werden keine DNS- oder NTP-Anfragen von APs mit Nutzertunnel ueber das Mesh uebertragen.
push "dhcp-option DNS {{ openvpn_users_ipv4_server }}"
push "dhcp-option NTP {{ openvpn_users_ipv4_server }}"

# tunnel config push for all clients
push "persist-key"
push "persist-tun"
push "explicit-exit-notify 3"
