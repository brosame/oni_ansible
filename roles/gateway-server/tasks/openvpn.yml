- name: openvpn installieren
  apt: pkg=openvpn state=present

- name: Abhaengigkeiten fuer Python connect_script installieren
  apt: pkg=python3-packaging state=present

- name: VPN-Gruppe anlegen
  user: state=present
        name=openvpn
        system=yes

- name: VPN-Nutzer anlegen
  user: state=present
        name=openvpn
        createhome=no
        group=openvpn
        system=yes

- name: Log-Verzeichnis anlegen (vor stretch)
  file: state=directory
        dest=/var/log/openvpn
        owner=openvpn
        group=openvpn
        mode=700
  when: ansible_distribution_major_version|int < 9

# Beim Anlegen der Status-Dateien wird seit openvpn v2.4 der Besitzer (root?) und nicht mehr die
# aktuellen Rechte geprueft. Somit muss der Besitzer des Verzeichnis "root" sein (anstelle des
# vorherigen "openvpn").
- name: Log-Verzeichnis anlegen (stretch)
  file: state=directory
        dest=/var/log/openvpn
        owner=root
        group=root
        mode=700
  when: ansible_distribution_major_version|int >= 9

- name: Diffie-Hellmann initialisieren
  command: creates=/etc/openvpn/dh2048.pem openssl dhparam -out /etc/openvpn/dh2048.pem 2048

# die "connect"-Skripte benoetigen die lokale Server-Version
- name: OpenVPN-Server-Version ermitteln
  shell: "dpkg --status openvpn | grep '^Version:' | awk '{print $2}'"
  register: openvpn_server_version
  check_mode: no
  changed_when: False

# Unterverzeichnisse erzeugen
- name: VPN-Verzeichnisse erzeugen
  file: dest=/etc/openvpn/{{ item }} state=directory
  with_items:
    - opennet_users
    - opennet_ugw

- name: Nutzer-VPN-Skripte uebertragen
  template:
          src=openvpn/opennet_users-connect_script.py
          dest=/etc/openvpn/opennet_users/connect_script.py
          mode=755
  check_mode: no

- name: UGW-VPN-Skripte uebertragen
  template:
          src=openvpn/opennet_ugw-connect_script.py
          dest=/etc/openvpn/opennet_ugw/connect_script.py
          mode=755
  check_mode: no

- name: CA-Zertifikat uebertragen
  copy: src=openvpn/{{ item }}/ca.crt
        dest=/etc/openvpn/{{ item }}/
  with_items:
    - opennet_users
    - opennet_ugw

# Zertifikate und Schluessel pruefen (Nutzer-VPN)
# Diese Dateien muessen manuell uebertragen werden.
- name: Vorhandensein von lokalem Nutzer-VPN-Zertifikat pruefen
  stat: path={{ openvpn_users_cert_file }}
  check_mode: no
  register: openvpn_users_certificate

- fail: msg="OpenVPN-Zertifikat fuer Nutzer-VPN fehlt ({{ openvpn_users_cert_file }})"
  when: not openvpn_users_certificate.stat.exists

- name: Vorhandensein von lokalem Nutzer-VPN-Schluessel pruefen
  stat: path={{ openvpn_users_key_file }}
  check_mode: no
  register: openvpn_users_key

- fail: msg="OpenVPN-Schluessel fuer Nutzer-VPN fehlt ({{ openvpn_users_key_file }})"
  when: not openvpn_users_key.stat.exists

# Zertifikate und Schluessel pruefen (UGW-VPN)
# Diese Dateien muessen manuell uebertragen werden.
- name: Vorhandensein von lokalem UGW-VPN-Zertifikat pruefen
  stat: path={{ openvpn_ugw_cert_file }}
  check_mode: no
  register: openvpn_ugw_certificate

- fail: msg="OpenVPN-Zertifikat fuer UGW-VPN fehlt ({{ openvpn_ugw_cert_file }})"
  when: not openvpn_ugw_certificate.stat.exists

- name: Vorhandensein von lokalem UGW-VPN-Schluessel pruefen
  stat: path={{ openvpn_ugw_key_file }}
  check_mode: no
  register: openvpn_ugw_key

- fail: msg="OpenVPN-Schluessel fuer UGW-VPN fehlt ({{ openvpn_ugw_key_file }})"
  when: not openvpn_ugw_key.stat.exists

- name: Nutzer-VPN-Konfiguration uebertragen
  template: src=openvpn/opennet_users.conf
            dest=/etc/openvpn/
  notify: restart openvpn

- name: UGW-VPN-Konfiguration uebertragen
  template: src=openvpn/opennet_ugw.conf
            dest=/etc/openvpn/
  notify: restart openvpn

- name: Zertifikatswiderrufslisten fuer Nutzer-Tunnel regelmaessig via cron aktualisieren
  cron:
    state=present
    name="Zertifikatswiderrufslisten fuer {{ item.name }} regelmaessig aktualisieren"
    hour="1,13"
    minute="{{ item.minute }}"
    job="/usr/local/sbin/opennetca_crldownload.sh {{ item.crl }} /etc/ssl/crl {{ item.ca_cert }} >/dev/null"
  with_items: "{{ugw_server_crl_list}}"

- name: UGW-Widerrufslisten erstmals herunterladen, falls nicht vorhanden
  command:
    creates=/etc/ssl/crl/{{ item.crl }}
    /usr/local/sbin/opennetca_crldownload.sh {{ item.crl }} /etc/ssl/crl {{ item.ca_cert }}
  with_items: "{{ugw_server_crl_list}}"

- name: veraltete Fragmente entfernen
  file: state=absent
        path={{ item }}
  with_items:
    - /etc/openvpn/opennet_users/connection_script.py
    - /etc/openvpn/opennet_users/connectcalc.py
    - /etc/openvpn/opennet_users/test-connect_script.py
    - /etc/openvpn/opennet_users/tls_verify.sh
    - /etc/openvpn/opennet_users/output_cert_ca.sh
    - /etc/openvpn/opennet_ugw/test-connect_script.py
