###
### apt repository directories for gnupg
###

- name: Apt-Repo GPG Public Keys-Verzeichnis anlegen
  file: state=directory
        dest=/home/{{ apt_repo_user }}/{{ apt_md_dir }}/keys
        owner={{ apt_repo_user }}
        group={{ apt_repo_user }}

- name: Apt-Repo Bin-Verzeichnis anlegen
  file: state=directory
        dest=/home/{{ apt_repo_user }}/bin
        owner={{ apt_repo_user }}
        group={{ apt_repo_user }}

- name: Apt-Repo Sign Script kopieren
  copy:
        src={{ apt_md_sign }}
        dest=/home/{{ apt_repo_user }}/{{ apt_md_sign }}
        owner={{ apt_repo_user }}
        group={{ apt_repo_user }}
        mode=+x

###
### gnupg base installation
###

- name: gnupg installieren
  apt: name=gnupg state=present

- name: gnupg Verzeichnis anlegen / Rechte prüfen
  file: dest=/home/{{ apt_repo_user }}/.gnupg 
        state=directory 
        mode=0700 
        owner={{ apt_repo_user }}
        group={{ apt_repo_user }}

- name: gnupg konfigurieren
  template:
        src=gen-key-script
        dest=/home/{{ apt_repo_user }}/.gnupg/gen-key-script
        owner={{ apt_repo_user }}
        group={{ apt_repo_user }}

- name: gnupg initialisieren
  command: "gpg --check-trustdb"
  changed_when: false
  become: yes
  become_user: "{{ apt_repo_user }}"
  become_method: su

###
### package maintainer keys
### 

- name: gnupg -- Importverzeichnis für DEV GPG Schlüssel anlegen
  file: dest=/home/{{ apt_repo_user }}/.gnupg/import
        state=directory
        owner={{ apt_repo_user }}
        group={{ apt_repo_user }}

- name: gnupg -- Kopieren der DEV GPG Schlüssel
  copy: src={{ item }}
        dest=/home/{{ apt_repo_user }}/.gnupg/import
        owner={{ apt_repo_user }}
        group={{ apt_repo_user }}
  with_fileglob:
    - "gpg_keys/aptrepo-user/*.asc"

# FIXME: changed Status auf Basis stderr Ausgabe, eventuell nicht optimal
- name: gnupg -- Import der DEV GPG Schlüssel in Apt-Repo Account
  command: "gpg --import /home/{{ apt_repo_user }}/.gnupg/import/{{ item | basename }}"
  register: out_gpg_dev_import
  changed_when: out_gpg_dev_import.stderr | search("import")
  with_fileglob:
    - gpg_keys/aptrepo-user/*.asc
  become: yes
  become_user: "{{ apt_repo_user }}"
  become_method: su

###
### apt repository sign key
###

- name: gnupg -- ggf. vorhandenes Apt-Repo Schlüsselpaar suchen 
  command: "gpg --list-secret-keys '{{ apt_repo_mail }}'"
  check_mode: no
  changed_when: false
  ignore_errors: true
  become: yes
  become_user: "{{ apt_repo_user }}"
  become_method: su
  register: gpg_apt

- name: gnupg -- haveged installieren (temporäre Entropie Quelle)
  apt:  name=haveged state=present
  when: gpg_apt is defined and gpg_apt.stdout == ""

- name: gnupg -- neuen Apt Schlüssel erstellen
  command: "gpg --batch --gen-key /home/{{ apt_repo_user }}/.gnupg/gen-key-script chdir=/home/{{ apt_repo_user }}"
  become: yes
  become_user: "{{ apt_repo_user }}"
  become_method: su
  when: gpg_apt is defined and gpg_apt.stdout == ""

- name: gnupg -- haveged deinstallieren (temporäre Entropie Quelle)
  apt:  name=haveged state=absent
  when: gpg_apt is defined and gpg_apt.stdout == ""

- name: gnupg -- Apt-Repo öffentlichen Schlüssel exportieren
  command: "gpg --export --armor '{{ apt_repo_mail }}' > /home/{{ apt_repo_user }}/{{ apt_md_dir }}/keys/{{ apt_gpg_file }}.asc"
  become: yes
  become_user: "{{ apt_repo_user }}"
  become_method: su
  when: gpg_apt is defined and gpg_apt.stdout == ""

###
### check-gpg-expire monitoring
###

- name: gnupg -- mutt, bc installieren (für check-gpg-expire)
  apt:  name={{item}} state=present
  with_items:
    - mutt
    - bc

# FIXME: derzeit verursache gpgme einen Fehler beim Mailversand
# "GPGME: CMS protocol not available", daher deaktivieren
- name: gnupg -- mutt konfigurieren (gpgme deaktivieren)
  lineinfile:
        path=/home/{{ apt_repo_user }}/.muttrc
        create=yes
        owner={{ apt_repo_user }}
        group={{ apt_repo_user }}
        line="set crypt_use_gpgme=no"

- name: gnupg -- Kopieren von check-gpg-expire.sh
  copy: src=bin/check-gpg-expire.sh
        dest=/home/{{ apt_repo_user }}/bin
        owner={{ apt_repo_user }}
        group={{ apt_repo_user }}
        mode=+x

- name: gnupg -- Erstellen von check-gpg-expire.cfg
  template:
        src=check-gpg-expire.cfg
        dest=/home/{{ apt_repo_user }}/bin/check-gpg-expire.cfg
        owner={{ apt_repo_user }}
        group={{ apt_repo_user }}

- name: gnupg -- Cron Job für check-gpg-expire anlegen
  cron:
        name="{{ apt_repo_name }} - run check gpg expire, send result via mail"
        day=*/5
        hour=7
        minute=30
        job="/home/{{ apt_repo_user }}/bin/check-gpg-expire.sh --mail >/dev/null"
        user="{{ apt_repo_user }}"
        cron_file="{{ apt_repo_user }}_check-gpg-expire"

- name: gnupg -- Cron Job für check-gpg-expire konfigurieren
  cronvar: 
        name=MAILTO
        value=root
        cron_file="{{ apt_repo_user }}_check-gpg-expire"
