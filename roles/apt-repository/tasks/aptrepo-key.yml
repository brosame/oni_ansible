- name: Apt-Repo GPG Public Keys-Verzeichnis anlegen
  file: state=directory
        dest=/home/{{ apt_repo_user }}/{{ apt_md_dir }}/keys
        owner={{ apt_repo_user}}
        group={{ apt_repo_user}}

- name: Apt-Repo Bin-Verzeichnis anlegen
  file: state=directory
        dest=/home/{{ apt_repo_user }}/bin
        owner={{ apt_repo_user}}
        group={{ apt_repo_user}}

- name: Apt-Repo Sign Script kopieren
  copy:
       src={{ apt_md_sign }}
       dest=/home/{{ apt_repo_user }}/{{ apt_md_sign }}

- name: gnupg installieren
  apt: name=gnupg state=present

- name: gnupg Verzeichnis anlegen / Rechte prüfen
  file: dest=/home/{{ apt_repo_user }}/.gnupg 
        state=directory 
        mode=0700 
        owner={{ apt_repo_user }}
        group={{ apt_repo_user}}

- name: gnupg konfigurieren
  template:
        src=gen-key-script
        dest=/home/{{ apt_repo_user }}/.gnupg/gen-key-script
        owner={{ apt_repo_user }}
        group={{ apt_repo_user}}

- name: sudo installieren (für GPG Keygen)
  apt:  name=sudo state=present

- name: gnupg initialisieren
  shell: "gpg --check-trustdb"
  changed_when: false
  become: yes
  become_user: "{{ apt_repo_user }}"

# SSH Zugriff für Repo-User ermöglichen
# der "SSH_USER" (fuer separate bash-History) wird aus dem Dateinamen extrahiert
- name: gnupg -- Import der DEV GPG Schluessel in Apt-Repo Account
  authorized_key: user={{ apt_repo_user }}
                  state=present
                  key='{{ lookup("file", item) }}'
                  key_options='environment="SSH_USER={{ item.split("/")[-1].split(".")[0] }}"'
  with_fileglob:
    - gpg_keys/aptrepo-user/*.pub

- name: gnupg -- ggf. vorhanden Apt Schlüssel suchen 
  shell: "gpg --list-secret-keys | grep '{{ apt_gpg_mail }}'"
  changed_when: false
  ignore_errors: true
  become: yes
  become_user: "{{ apt_repo_user }}"
  register: gpgkeys

- name: haveged installieren (temporäre Entropie Quelle)
  apt:  name=haveged state=present
  when: gpgkeys is defined and gpgkeys.stdout == ""

- name: gnupg -- neuen Apt Schlüssel erstellen
  command: "gpg --batch --gen-key /home/{{ apt_repo_user }}/.gnupg/gen-key-script chdir=/home/{{ apt_repo_user }}"
  become: yes
  become_user: "{{ apt_repo_user }}"
  when: gpgkeys is defined and gpgkeys.stdout == ""

- name: haveged deinstallieren (temporäre Entropie Quelle)
  apt: name=haveged state=absent
  when: gpgkeys is defined and gpgkeys.stdout == ""
