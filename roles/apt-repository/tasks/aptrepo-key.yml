- name: Apt-Repo GPG Public Keys-Verzeichnis anlegen
  file: state=directory
        dest=/home/{{ apt_repo_user }}/{{ apt_md_dir }}/keys
        owner={{ apt_repo_user}}
        group={{ apt_repo_user}}

- name: Apt-Repo Bin-Verzeichnis anlegen
  file: state=directory
        dest=/home/{{ apt_repo_user }}/bin
        owner={{ apt_repo_user}}
        group={{ apt_repo_user}}

- name: Apt-Repo Sign Script kopieren
  copy:
       src={{ apt_md_sign }}
       dest=/home/{{ apt_repo_user }}/{{ apt_md_sign }}

- name: gnupg installieren
  apt: name=gnupg state=present

- name: gnupg Verzeichnis anlegen / Rechte prüfen
  file: dest=/home/{{ apt_repo_user }}/.gnupg 
        state=directory 
        mode=0700 
        owner={{ apt_repo_user }}
        group={{ apt_repo_user}}

- name: gnupg konfigurieren
  template:
          src=gen-key-script
          dest=/home/{{ apt_repo_user }}/.gnupg/gen-key-script

- name: haveged installieren (temporäre Entropie Quelle)
  apt: name=haveged state=present

- name: check existing secret key
  shell: "gpg --list-secret-keys | grep '{{ apt_gpg_mail }}'"
  changed_when: false
  ignore_errors: true
  become: yes
  become_user: "{{ apt_repo_user }}"
  register: gpgkeys

- debug: var=gpgkeys

- name: generate gpg key
  command: "gpg --batch --gen-key /home/{{ apt_repo_user }}/.gnupg/gen-key-script chdir=/home/{{ apt_repo_user }}"
  become: yes
  become_user: "{{ apt_repo_user }}"
  when: gpgkeys is defined and gpgkeys.stdout == ""

# FIXME: GPG Key anlegen fehlt

- name: haveged deinstallieren (temporäre Entropie Quelle)
  apt: name=haveged state=absent
