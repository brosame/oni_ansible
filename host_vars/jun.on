short_hostname: jun

wan_interface: eth1

olsr_main_ip: 192.168.10.14
olsr_main_ipv6: fd32:d8d3:87da::10:14

olsr_interfaces:
  - { name: "eth0" }

olsr_hna_announcements_ipv4:
  # Erreichbarkeit der oeffentlichen IP im olsr-Mesh
  - 139.30.241.201

# we need at least one announcement to generate /var/run/services_olsr
# this file is currently needed on jun for the domain-proxy service
olsr_nameservice_announcements:
 # provide "http://api.on/" for firmware up to version 0.5.4 (traceroute and map visualization)
 - "http://{{ olsr_main_ip }}:81|tcp|public-domain-http api.on"

apache2_sites:
  - { name: domain-proxy }

# slt läuft auf Port 443 - somit müssen unsere eigenen Dienste auf Port 444 laufen
apache2_port_https: 444

# Geräte und Dienste, die via domain-proxy ausgeliefert werden, können unsaubere
# Content-Type-Header versenden.  Ein praktisches Beispiel ist die Kamera auf der Petrikirche
# (http://kamera-petri.opennet-initiative.de/). Ihre Content-Type-Header sind fehlerhaft, auf dass
# die Javascript-Dateien vom Browser im Falle von "nosniff" verworfen werden.
apache2_security_force_nosniff: false
apache2_security_frame_options: null

letsencrypt_certificates:
  - { on_tld_base: api }
  - { on_tld_base: map }
  - { on_tld_base: domain-proxy }

domain_proxy_redirect:
  - { on_tld_base: api, ip: "{{ olsr_main_ip }}", port: 81, service: http }
  - { on_tld_base: api, ip: "{{ olsr_main_ip }}", port: 444, service: https }
  - { on_tld_base: map, ip: "{{ olsr_main_ip }}", port: 81, service: http }
  - { on_tld_base: map, ip: "{{ olsr_main_ip }}", port: 444, service: https }
  # die http-Umleitung für domain-proxy.on-i.de ist nicht notwendig, da apache2 diese direkt ausliefert
  - { on_tld_base: domain-proxy, ip: "{{ olsr_main_ip }}", port: 444, service: https }
  # provide "http://api.on/" for firmware up to version 0.5.4 (traceroute and map visualization)
  #- { "api.on", ip: "{{ olsr_main_ip }}", port: 81, service: http }

debian_release: bullseye 
